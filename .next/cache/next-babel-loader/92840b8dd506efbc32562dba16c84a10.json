{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Typography, Container, Grid, Box } from '@material-ui/core';\nimport ErrorPage from 'next/error';\nimport { NextSeo } from 'next-seo';\nimport { ResponsivePie } from '@nivo/pie';\nimport { ResponsiveBar } from '@nivo/bar';\nimport theme from '../../../config/theme';\nimport ResponsiveImage from '../../../components/ResponsiveImage';\nimport FSAT_API from '../../../api';\n\nconst humanizeDuration = require('humanize-duration');\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: ${props => props.dark ? theme.palette.primary.main : theme.palette.common.white};\n  }\n`;\nconst Heading = styled(Typography)({\n  fontWeight: 'bold',\n  color: `${theme.palette.primary.main}`\n});\n\nconst TestReport = ({\n  data,\n  error\n}) => {\n  if (error) {\n    return __jsx(ErrorPage, {\n      statusCode: error.statusCode\n    });\n  } // eslint-disable-next-line no-unused-vars\n\n\n  const {\n    0: testState,\n    1: setTestState\n  } = useState(_objectSpread({}, data, {\n    answer: null,\n    loading: false\n  }));\n\n  const getStatementSameScoreCompareAverageTime = () => {\n    const score = testState.score;\n    const timeTaken = testState.timeTaken;\n    const averageTimeTakenSameScore = testState.averageTimeTaken.sameScore;\n\n    if (timeTaken === averageTimeTakenSameScore) {\n      return __jsx(Typography, {\n        component: \"p\"\n      }, \"With the same score of \", __jsx(\"b\", null, score, \"/20\"), \", your time taken is the\", ' ', __jsx(\"b\", null, \"same\"), \" as the average, which is\", ' ', __jsx(\"b\", null, humanizeDuration(averageTimeTakenSameScore * 1000, {\n        maxDecimalPoints: 2\n      })), \".\");\n    } else if (timeTaken > averageTimeTakenSameScore) {\n      return __jsx(Typography, {\n        component: \"p\"\n      }, \"With the same score of \", __jsx(\"b\", null, score, \"/20\"), \", you are\", ' ', __jsx(\"b\", null, humanizeDuration((timeTaken - averageTimeTakenSameScore) * 1000, {\n        maxDecimalPoints: 2\n      })), ' ', \"slower the average time of\", ' ', __jsx(\"b\", null, humanizeDuration(averageTimeTakenSameScore * 1000, {\n        maxDecimalPoints: 2\n      })), \".\");\n    } else {\n      return __jsx(Typography, {\n        component: \"p\"\n      }, \"With the same score of \", __jsx(\"b\", null, score, \"/20\"), \", you are\", ' ', __jsx(\"b\", null, humanizeDuration((timeTaken - averageTimeTakenSameScore) * 1000, {\n        maxDecimalPoints: 2\n      })), ' ', \"faster the average time of\", ' ', __jsx(\"b\", null, humanizeDuration(averageTimeTakenSameScore * 1000, {\n        maxDecimalPoints: 2\n      })), \".\");\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(GlobalStyle, null), __jsx(NextSeo, {\n    title: \"Forward School Aptitude Test Report\",\n    noindex: true\n  }), __jsx(Container, null, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 2\n  }, __jsx(Box, {\n    my: \"2rem\"\n  }, __jsx(ResponsiveImage, {\n    width: \"130px\",\n    alt: \"Forward School\",\n    src: require('../../../../public/forward-school-logo-blue.png')\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Heading, {\n    variant: \"h3\",\n    component: \"h1\",\n    gutterBottom: true\n  }, \"Forward School Aptitude Test Report\")), __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, {\n    my: 3,\n    color: \"primary.main\"\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: 'bold'\n    },\n    variant: \"h5\",\n    component: \"h2\",\n    gutterBottom: true\n  }, \"OVERVIEW\")), __jsx(Box, {\n    mb: 3\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Name: \", __jsx(\"b\", null, testState.name)), __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Score: \", __jsx(\"b\", null, testState.score, \"/20\")), __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Average Score:\", ' ', __jsx(\"b\", null, Math.round(testState.averageScore.overall * 100) / 100, \"/20\")), __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Time Taken:\", ' ', __jsx(\"b\", null, humanizeDuration(testState.timeTaken * 1000, {\n    maxDecimalPoints: 2\n  }))), __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Average Time Taken:\", ' ', __jsx(\"b\", null, humanizeDuration(testState.averageTimeTaken.overall * 1000, {\n    maxDecimalPoints: 2\n  }))), __jsx(Typography, {\n    variant: \"h6\",\n    component: \"p\",\n    gutterBottom: true\n  }, \"Completed: \", __jsx(\"b\", null, testState.completed ? 'Yes' : 'No'))), __jsx(Box, {\n    bgcolor: \"primary.main\",\n    color: \"white\",\n    p: 2\n  }, getStatementSameScoreCompareAverageTime())), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, {\n    my: 3,\n    color: \"primary.main\"\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: 'bold'\n    },\n    variant: \"h5\",\n    component: \"h2\",\n    gutterBottom: true\n  }, \"BREAKDOWN\")), __jsx(Box, {\n    style: {\n      height: '350px',\n      fontWeight: 'bold'\n    },\n    p: 1\n  }, __jsx(ResponsivePie, {\n    data: [{\n      id: 'Correct',\n      label: 'Correct',\n      value: testState.breakdown.correct\n    }, {\n      id: 'Incorrect',\n      label: 'Incorrect',\n      value: testState.breakdown.incorrect\n    }, {\n      id: 'Unanswered',\n      label: 'Unanswered',\n      value: testState.breakdown.unanswered\n    }],\n    margin: {\n      top: 30,\n      right: 0,\n      bottom: 80,\n      left: 0\n    },\n    colors: ['#0054a6', '#f15a22', '#40ba8d'],\n    enableRadialLabels: false,\n    radialLabelsTextXOffset: 6,\n    radialLabelsLinkOffset: 0,\n    radialLabelsLinkDiagonalLength: 16,\n    radialLabelsLinkHorizontalLength: 24,\n    radialLabelsLinkStrokeWidth: 1,\n    radialLabelsSkipAngle: 1,\n    slicesLabelsSkipAngle: 10,\n    slicesLabelsTextColor: \"#ffffff\",\n    isInteractive: false,\n    legends: [{\n      anchor: 'bottom',\n      direction: 'row',\n      translateY: 56,\n      itemWidth: 90,\n      itemHeight: 18,\n      itemTextColor: '#333333',\n      symbolSize: 18,\n      symbolShape: 'circle'\n    }]\n  })))), __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, {\n    my: 3,\n    color: \"primary.main\"\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: 'bold'\n    },\n    variant: \"h5\",\n    component: \"h2\",\n    gutterBottom: true\n  }, \"TIME TAKEN VS AVERAGE\")), __jsx(Typography, null, \"Your time taken compared to the average time taken.\", ' ', __jsx(\"b\", null, \"The lower the time, the better\"), \".\"), __jsx(Box, {\n    style: {\n      height: '350px',\n      fontWeight: 'bold'\n    },\n    p: 1\n  }, __jsx(ResponsiveBar, {\n    data: [{\n      id: 'You',\n      You: Math.round(testState.timeTaken * 100) / 100,\n      Average: 0\n    }, {\n      id: 'Average',\n      You: 0,\n      Average: Math.round(testState.averageTimeTaken.overall * 100) / 100\n    }],\n    keys: ['You', 'Average'],\n    margin: {\n      top: 20,\n      right: 30,\n      bottom: 50,\n      left: 70\n    },\n    padding: 0.5,\n    colors: ['#0054a6', '#40ba8d'],\n    labelTextColor: \"#ffffff\",\n    axisLeft: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Time (secs)',\n      legendPosition: 'middle',\n      legendOffset: -45\n    },\n    isInteractive: false\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, {\n    my: 3,\n    color: \"primary.main\"\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: 'bold'\n    },\n    variant: \"h5\",\n    component: \"h2\",\n    gutterBottom: true\n  }, \"SCORE VS AVERAGE\")), __jsx(Typography, null, \"Your score compared to the average score.\", ' ', __jsx(\"b\", null, \"The higher the score, the better\"), \".\"), __jsx(Box, {\n    style: {\n      height: '350px',\n      fontWeight: 'bold'\n    },\n    p: 1\n  }, __jsx(ResponsiveBar, {\n    data: [{\n      id: 'You',\n      You: testState.score,\n      Average: 0\n    }, {\n      id: 'Average',\n      You: 0,\n      Average: Math.round(testState.averageScore.overall * 100) / 100\n    }],\n    keys: ['You', 'Average'],\n    margin: {\n      top: 20,\n      right: 30,\n      bottom: 50,\n      left: 70\n    },\n    padding: 0.5,\n    colors: ['#0054a6', '#40ba8d'],\n    labelTextColor: \"#ffffff\",\n    axisLeft: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Score',\n      legendPosition: 'middle',\n      legendOffset: -45\n    },\n    isInteractive: false\n  })))))));\n};\n\nTestReport.getInitialProps = async ({\n  req,\n  res,\n  query\n}) => {\n  const fsatApi = FSAT_API();\n  const {\n    testId\n  } = query;\n\n  if (req) {\n    try {\n      const response = await fsatApi.getTestResults({\n        testId\n      });\n\n      if (!response.data.ended) {\n        res.writeHead(302, {\n          Location: `/tests/${testId}`\n        });\n        res.end();\n      }\n\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error: error.response.data\n      };\n    }\n  }\n\n  return {\n    data: null,\n    error: null\n  };\n};\n\nexport default TestReport;","map":{"version":3,"sources":["/home/forwardschool/aptitude-web/src/pages/tests/[testId]/report.js"],"names":["React","useState","styled","createGlobalStyle","Typography","Container","Grid","Box","ErrorPage","NextSeo","ResponsivePie","ResponsiveBar","theme","ResponsiveImage","FSAT_API","humanizeDuration","require","GlobalStyle","props","dark","palette","primary","main","common","white","Heading","fontWeight","color","TestReport","data","error","statusCode","testState","setTestState","answer","loading","getStatementSameScoreCompareAverageTime","score","timeTaken","averageTimeTakenSameScore","averageTimeTaken","sameScore","maxDecimalPoints","name","Math","round","averageScore","overall","completed","height","id","label","value","breakdown","correct","incorrect","unanswered","top","right","bottom","left","anchor","direction","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","You","Average","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","getInitialProps","req","res","query","fsatApi","testId","response","getTestResults","ended","writeHead","Location","end"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport { Typography, Container, Grid, Box } from '@material-ui/core'\nimport ErrorPage from 'next/error'\nimport { NextSeo } from 'next-seo'\nimport { ResponsivePie } from '@nivo/pie'\nimport { ResponsiveBar } from '@nivo/bar'\n\nimport theme from '../../../config/theme'\nimport ResponsiveImage from '../../../components/ResponsiveImage'\nimport FSAT_API from '../../../api'\nconst humanizeDuration = require('humanize-duration')\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: ${props =>\n      props.dark ? theme.palette.primary.main : theme.palette.common.white};\n  }\n`\n\nconst Heading = styled(Typography)({\n  fontWeight: 'bold',\n  color: `${theme.palette.primary.main}`\n})\n\nconst TestReport = ({ data, error }) => {\n  if (error) {\n    return <ErrorPage statusCode={error.statusCode} />\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  const [testState, setTestState] = useState({\n    ...data,\n    answer: null,\n    loading: false\n  })\n\n  const getStatementSameScoreCompareAverageTime = () => {\n    const score = testState.score\n    const timeTaken = testState.timeTaken\n    const averageTimeTakenSameScore = testState.averageTimeTaken.sameScore\n\n    if (timeTaken === averageTimeTakenSameScore) {\n      return (\n        <Typography component='p'>\n          With the same score of <b>{score}/20</b>, your time taken is the{' '}\n          <b>same</b> as the average, which is{' '}\n          <b>\n            {humanizeDuration(averageTimeTakenSameScore * 1000, {\n              maxDecimalPoints: 2\n            })}\n          </b>\n          .\n        </Typography>\n      )\n    } else if (timeTaken > averageTimeTakenSameScore) {\n      return (\n        <Typography component='p'>\n          With the same score of <b>{score}/20</b>, you are{' '}\n          <b>\n            {humanizeDuration((timeTaken - averageTimeTakenSameScore) * 1000, {\n              maxDecimalPoints: 2\n            })}\n          </b>{' '}\n          slower the average time of{' '}\n          <b>\n            {humanizeDuration(averageTimeTakenSameScore * 1000, {\n              maxDecimalPoints: 2\n            })}\n          </b>\n          .\n        </Typography>\n      )\n    } else {\n      return (\n        <Typography component='p'>\n          With the same score of <b>{score}/20</b>, you are{' '}\n          <b>\n            {humanizeDuration((timeTaken - averageTimeTakenSameScore) * 1000, {\n              maxDecimalPoints: 2\n            })}\n          </b>{' '}\n          faster the average time of{' '}\n          <b>\n            {humanizeDuration(averageTimeTakenSameScore * 1000, {\n              maxDecimalPoints: 2\n            })}\n          </b>\n          .\n        </Typography>\n      )\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <NextSeo title='Forward School Aptitude Test Report' noindex />\n      <Container>\n        <Grid container>\n          <Grid item container xs={12}>\n            <Grid item xs={6} sm={2}>\n              <Box my='2rem'>\n                <ResponsiveImage\n                  width='130px'\n                  alt='Forward School'\n                  src={require('../../../../public/forward-school-logo-blue.png')}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Heading variant='h3' component='h1' gutterBottom>\n              Forward School Aptitude Test Report\n            </Heading>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Box my={3} color='primary.main'>\n                <Typography\n                  style={{ fontWeight: 'bold' }}\n                  variant='h5'\n                  component='h2'\n                  gutterBottom\n                >\n                  OVERVIEW\n                </Typography>\n              </Box>\n              <Box mb={3}>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Name: <b>{testState.name}</b>\n                </Typography>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Score: <b>{testState.score}/20</b>\n                </Typography>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Average Score:{' '}\n                  <b>\n                    {Math.round(testState.averageScore.overall * 100) / 100}/20\n                  </b>\n                </Typography>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Time Taken:{' '}\n                  <b>\n                    {humanizeDuration(testState.timeTaken * 1000, {\n                      maxDecimalPoints: 2\n                    })}\n                  </b>\n                </Typography>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Average Time Taken:{' '}\n                  <b>\n                    {humanizeDuration(\n                      testState.averageTimeTaken.overall * 1000,\n                      {\n                        maxDecimalPoints: 2\n                      }\n                    )}\n                  </b>\n                </Typography>\n                <Typography variant='h6' component='p' gutterBottom>\n                  Completed: <b>{testState.completed ? 'Yes' : 'No'}</b>\n                </Typography>\n              </Box>\n              <Box bgcolor='primary.main' color='white' p={2}>\n                {getStatementSameScoreCompareAverageTime()}\n              </Box>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Box my={3} color='primary.main'>\n                <Typography\n                  style={{ fontWeight: 'bold' }}\n                  variant='h5'\n                  component='h2'\n                  gutterBottom\n                >\n                  BREAKDOWN\n                </Typography>\n              </Box>\n              <Box style={{ height: '350px', fontWeight: 'bold' }} p={1}>\n                <ResponsivePie\n                  data={[\n                    {\n                      id: 'Correct',\n                      label: 'Correct',\n                      value: testState.breakdown.correct\n                    },\n                    {\n                      id: 'Incorrect',\n                      label: 'Incorrect',\n                      value: testState.breakdown.incorrect\n                    },\n                    {\n                      id: 'Unanswered',\n                      label: 'Unanswered',\n                      value: testState.breakdown.unanswered\n                    }\n                  ]}\n                  margin={{ top: 30, right: 0, bottom: 80, left: 0 }}\n                  colors={['#0054a6', '#f15a22', '#40ba8d']}\n                  enableRadialLabels={false}\n                  radialLabelsTextXOffset={6}\n                  radialLabelsLinkOffset={0}\n                  radialLabelsLinkDiagonalLength={16}\n                  radialLabelsLinkHorizontalLength={24}\n                  radialLabelsLinkStrokeWidth={1}\n                  radialLabelsSkipAngle={1}\n                  slicesLabelsSkipAngle={10}\n                  slicesLabelsTextColor='#ffffff'\n                  isInteractive={false}\n                  legends={[\n                    {\n                      anchor: 'bottom',\n                      direction: 'row',\n                      translateY: 56,\n                      itemWidth: 90,\n                      itemHeight: 18,\n                      itemTextColor: '#333333',\n                      symbolSize: 18,\n                      symbolShape: 'circle'\n                    }\n                  ]}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Box my={3} color='primary.main'>\n                <Typography\n                  style={{ fontWeight: 'bold' }}\n                  variant='h5'\n                  component='h2'\n                  gutterBottom\n                >\n                  TIME TAKEN VS AVERAGE\n                </Typography>\n              </Box>\n              <Typography>\n                Your time taken compared to the average time taken.{' '}\n                <b>The lower the time, the better</b>.\n              </Typography>\n              <Box style={{ height: '350px', fontWeight: 'bold' }} p={1}>\n                <ResponsiveBar\n                  data={[\n                    {\n                      id: 'You',\n                      You: Math.round(testState.timeTaken * 100) / 100,\n                      Average: 0\n                    },\n                    {\n                      id: 'Average',\n                      You: 0,\n                      Average:\n                        Math.round(testState.averageTimeTaken.overall * 100) /\n                        100\n                    }\n                  ]}\n                  keys={['You', 'Average']}\n                  margin={{ top: 20, right: 30, bottom: 50, left: 70 }}\n                  padding={0.5}\n                  colors={['#0054a6', '#40ba8d']}\n                  labelTextColor='#ffffff'\n                  axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Time (secs)',\n                    legendPosition: 'middle',\n                    legendOffset: -45\n                  }}\n                  isInteractive={false}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Box my={3} color='primary.main'>\n                <Typography\n                  style={{ fontWeight: 'bold' }}\n                  variant='h5'\n                  component='h2'\n                  gutterBottom\n                >\n                  SCORE VS AVERAGE\n                </Typography>\n              </Box>\n              <Typography>\n                Your score compared to the average score.{' '}\n                <b>The higher the score, the better</b>.\n              </Typography>\n              <Box style={{ height: '350px', fontWeight: 'bold' }} p={1}>\n                <ResponsiveBar\n                  data={[\n                    {\n                      id: 'You',\n                      You: testState.score,\n                      Average: 0\n                    },\n                    {\n                      id: 'Average',\n                      You: 0,\n                      Average:\n                        Math.round(testState.averageScore.overall * 100) / 100\n                    }\n                  ]}\n                  keys={['You', 'Average']}\n                  margin={{ top: 20, right: 30, bottom: 50, left: 70 }}\n                  padding={0.5}\n                  colors={['#0054a6', '#40ba8d']}\n                  labelTextColor='#ffffff'\n                  axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Score',\n                    legendPosition: 'middle',\n                    legendOffset: -45\n                  }}\n                  isInteractive={false}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  )\n}\n\nTestReport.getInitialProps = async ({ req, res, query }) => {\n  const fsatApi = FSAT_API()\n  const { testId } = query\n\n  if (req) {\n    try {\n      const response = await fsatApi.getTestResults({\n        testId\n      })\n\n      if (!response.data.ended) {\n        res.writeHead(302, {\n          Location: `/tests/${testId}`\n        })\n        res.end()\n      }\n\n      return { data: response.data, error: null }\n    } catch (error) {\n      return { data: null, error: error.response.data }\n    }\n  }\n\n  return { data: null, error: null }\n}\n\nTestReport.propTypes = {\n  data: PropTypes.object,\n  error: PropTypes.object\n}\n\nexport default TestReport\n"]},"metadata":{},"sourceType":"module"}