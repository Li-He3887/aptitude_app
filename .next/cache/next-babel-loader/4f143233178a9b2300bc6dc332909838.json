{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Error from 'next/error';\nimport * as Sentry from '@sentry/node';\n\nconst FSATError = ({\n  statusCode,\n  hasGetInitialPropsRun,\n  err\n}) => {\n  if (!hasGetInitialPropsRun && err) {\n    // getInitialProps is not called in case of\n    // https://github.com/zeit/next.js/issues/8592. As a workaround, we pass\n    // err via _app.js so it can be captured\n    Sentry.captureException(err);\n  }\n\n  return __jsx(Error, {\n    statusCode: statusCode\n  });\n};\n\nFSATError.getInitialProps = async ({\n  res,\n  err,\n  asPath\n}) => {\n  const errorInitialProps = await Error.getInitialProps({\n    res,\n    err\n  }); // Workaround for https://github.com/zeit/next.js/issues/8592, mark when\n  // getInitialProps has run\n\n  errorInitialProps.hasGetInitialPropsRun = true;\n\n  if (res) {\n    // Running on the server, the response object is available.\n    //\n    // Next.js will pass an err on the server if a page's `getInitialProps`\n    // threw or returned a Promise that rejected\n    if (res.statusCode === 404) {\n      // Opinionated: do not record an exception in Sentry for 404\n      return {\n        statusCode: 404\n      };\n    }\n\n    if (err) {\n      Sentry.captureException(err);\n      return errorInitialProps;\n    }\n  } else {\n    // Running on the client (browser).\n    //\n    // Next.js will provide an err if:\n    //\n    //  - a page's `getInitialProps` threw or returned a Promise that rejected\n    //  - an exception was thrown somewhere in the React lifecycle (render,\n    //    componentDidMount, etc) that was caught by Next.js's React Error\n    //    Boundary. Read more about what types of exceptions are caught by Error\n    //    Boundaries: https://reactjs.org/docs/error-boundaries.html\n    if (err) {\n      Sentry.captureException(err);\n      return errorInitialProps;\n    }\n  } // If this point is reached, getInitialProps was called without any\n  // information about what the error might be. This is unexpected and may\n  // indicate a bug introduced in Next.js, so record it in Sentry\n\n\n  Sentry.captureException(new Error(`_error.js getInitialProps missing data at path: ${asPath}`));\n  return errorInitialProps;\n};\n\nexport default FSATError;","map":{"version":3,"sources":["/home/forwardschool/aptitude-web/src/pages/_error.js"],"names":["React","Error","Sentry","FSATError","statusCode","hasGetInitialPropsRun","err","captureException","getInitialProps","res","asPath","errorInitialProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,qBAAd;AAAqCC,EAAAA;AAArC,CAAD,KAAgD;AAChE,MAAI,CAACD,qBAAD,IAA0BC,GAA9B,EAAmC;AACjC;AACA;AACA;AACAJ,IAAAA,MAAM,CAACK,gBAAP,CAAwBD,GAAxB;AACD;;AAED,SAAO,MAAC,KAAD;AAAO,IAAA,UAAU,EAAEF;AAAnB,IAAP;AACD,CATD;;AAWAD,SAAS,CAACK,eAAV,GAA4B,OAAO;AAAEC,EAAAA,GAAF;AAAOH,EAAAA,GAAP;AAAYI,EAAAA;AAAZ,CAAP,KAAgC;AAC1D,QAAMC,iBAAiB,GAAG,MAAMV,KAAK,CAACO,eAAN,CAAsB;AAAEC,IAAAA,GAAF;AAAOH,IAAAA;AAAP,GAAtB,CAAhC,CAD0D,CAG1D;AACA;;AACAK,EAAAA,iBAAiB,CAACN,qBAAlB,GAA0C,IAA1C;;AAEA,MAAII,GAAJ,EAAS;AACP;AACA;AACA;AACA;AAEA,QAAIA,GAAG,CAACL,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B;AACA,aAAO;AAAEA,QAAAA,UAAU,EAAE;AAAd,OAAP;AACD;;AAED,QAAIE,GAAJ,EAAS;AACPJ,MAAAA,MAAM,CAACK,gBAAP,CAAwBD,GAAxB;AAEA,aAAOK,iBAAP;AACD;AACF,GAhBD,MAgBO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIL,GAAJ,EAAS;AACPJ,MAAAA,MAAM,CAACK,gBAAP,CAAwBD,GAAxB;AAEA,aAAOK,iBAAP;AACD;AACF,GAtCyD,CAwC1D;AACA;AACA;;;AACAT,EAAAA,MAAM,CAACK,gBAAP,CACE,IAAIN,KAAJ,CAAW,mDAAkDS,MAAO,EAApE,CADF;AAIA,SAAOC,iBAAP;AACD,CAhDD;;AAwDA,eAAeR,SAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Error from 'next/error'\nimport * as Sentry from '@sentry/node'\n\nconst FSATError = ({ statusCode, hasGetInitialPropsRun, err }) => {\n  if (!hasGetInitialPropsRun && err) {\n    // getInitialProps is not called in case of\n    // https://github.com/zeit/next.js/issues/8592. As a workaround, we pass\n    // err via _app.js so it can be captured\n    Sentry.captureException(err)\n  }\n\n  return <Error statusCode={statusCode} />\n}\n\nFSATError.getInitialProps = async ({ res, err, asPath }) => {\n  const errorInitialProps = await Error.getInitialProps({ res, err })\n\n  // Workaround for https://github.com/zeit/next.js/issues/8592, mark when\n  // getInitialProps has run\n  errorInitialProps.hasGetInitialPropsRun = true\n\n  if (res) {\n    // Running on the server, the response object is available.\n    //\n    // Next.js will pass an err on the server if a page's `getInitialProps`\n    // threw or returned a Promise that rejected\n\n    if (res.statusCode === 404) {\n      // Opinionated: do not record an exception in Sentry for 404\n      return { statusCode: 404 }\n    }\n\n    if (err) {\n      Sentry.captureException(err)\n\n      return errorInitialProps\n    }\n  } else {\n    // Running on the client (browser).\n    //\n    // Next.js will provide an err if:\n    //\n    //  - a page's `getInitialProps` threw or returned a Promise that rejected\n    //  - an exception was thrown somewhere in the React lifecycle (render,\n    //    componentDidMount, etc) that was caught by Next.js's React Error\n    //    Boundary. Read more about what types of exceptions are caught by Error\n    //    Boundaries: https://reactjs.org/docs/error-boundaries.html\n    if (err) {\n      Sentry.captureException(err)\n\n      return errorInitialProps\n    }\n  }\n\n  // If this point is reached, getInitialProps was called without any\n  // information about what the error might be. This is unexpected and may\n  // indicate a bug introduced in Next.js, so record it in Sentry\n  Sentry.captureException(\n    new Error(`_error.js getInitialProps missing data at path: ${asPath}`)\n  )\n\n  return errorInitialProps\n}\n\nFSATError.propTypes = {\n  statusCode: PropTypes.number,\n  hasGetInitialPropsRun: PropTypes.bool,\n  err: PropTypes.object\n}\n\nexport default FSATError\n"]},"metadata":{},"sourceType":"module"}