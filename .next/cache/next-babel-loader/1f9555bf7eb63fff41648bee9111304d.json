{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  font-weight: bold;\\n\\n  &:disabled {\\n    color: \", \";\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  font-weight: bold;\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  bottom: 0;\\n  left: 0;\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  top: 80px;\\n  left: 0;\\n  height: 60px;\\n  padding: 15px 0 0 0;\\n  background-color: \", \";\\n\\n  \", \" {\\n    top: 65px;\\n    height: 50px;\\n    padding: 15px 0 0 0;\\n  }\\n\\n  \", \" {\\n    top: 45px;\\n    height: 30px;\\n    padding: 10px;\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  top: 0;\\n  left: 0;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  position: fixed;\\n  height: 80px;\\n  padding: 15px;\\n  background-color: \", \";\\n\\n  \", \" {\\n    height: 65px;\\n    padding: 12px;\\n  }\\n\\n  \", \" {\\n    height: 45px;\\n    padding: 8px;\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  font-weight: 600;\\n  font-size: 1rem;\\n  text-align: left;\\n\\n  background \", \" {\\n    font-size: 0.95rem;\\n  }\\n\\n  \", \" {\\n    font-size: 0.9rem;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  min-height: calc(100vh - 220px);\\n  margin: 140px 0 80px;\\n  padding: 20px 10px;\\n\\n  background \", \" {\\n    min-height: calc(100vh - 170px);\\n    margin: 105px 0 65px;\\n    padding: 15px 10px;\\n  }\\n\\n  \", \" {\\n    min-height: calc(100vh - 120px);\\n    margin: 75px 0 45px;\\n    padding: 20px 10px;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  width: 100%;\\n  text-align: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Container, Grid, Box, Button, Typography, Stepper, MobileStepper, Step, StepLabel, Hidden, Radio, RadioGroup, FormControlLabel, CircularProgress } from '@material-ui/core';\nimport Router from 'next/router';\nimport ErrorPage from 'next/error';\nimport { NextSeo } from 'next-seo';\nimport { useSnackbar } from 'notistack';\nimport { get } from 'lodash';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport * as Sentry from '@sentry/browser';\nimport theme from '../../../config/theme';\nimport { getErrorMessage } from '../../../utils/error';\nimport ResponsiveImage from '../../../components/ResponsiveImage';\nimport FSAT_API from '../../../api';\nvar Centered = styled.div(_templateObject());\nvar Main = styled(Centered)(_templateObject2(), theme.breakpoints.down('md'), theme.breakpoints.down('sm'));\nvar Question = styled.div(_templateObject3(), theme.breakpoints.down('md'), theme.breakpoints.down('sm'));\nvar Bar = styled(Centered)(_templateObject4(), theme.palette.primary.main, theme.breakpoints.down('md'), theme.breakpoints.down('sm'));\nvar TopBar = styled(Bar)(_templateObject5());\nvar QuestionStepperBar = styled(Bar)(_templateObject6(), theme.palette.grey[100], theme.breakpoints.down('md'), theme.breakpoints.down('sm'));\nvar BottomBar = styled(Bar)(_templateObject7());\nvar TimerCountdown = styled(Typography)(_templateObject8(), theme.palette.common.white);\nvar NextButton = styled(Button)(_templateObject9(), theme.palette.common.white, theme.palette.grey[400]);\n\nvar Test = function Test(_ref) {\n  var data = _ref.data,\n      error = _ref.error;\n\n  if (error) {\n    return __jsx(ErrorPage, {\n      statusCode: error.statusCode\n    });\n  }\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useState = useState(_objectSpread({}, data, {\n    answer: null,\n    loading: false\n  })),\n      testState = _useState[0],\n      setTestState = _useState[1];\n\n  useEffect(function () {\n    if (!testState.ended && testState.timeTaken > 0) {\n      setInterval(function () {\n        setTestState(function (testState) {\n          return _objectSpread({}, testState, {\n            timeTaken: (_Date$now() - Date.parse(testState.start)) / 1000\n          });\n        });\n      }, 1000);\n    }\n  }, [null]);\n\n  var formatTime = function formatTime(timeInSeconds) {\n    var format = function format(val) {\n      return \"0\".concat(Math.floor(val)).slice(-2);\n    };\n\n    var minutes = timeInSeconds % 3600 / 60;\n    return [minutes, timeInSeconds % 60].map(format).join(':');\n  };\n\n  var renderContent = function renderContent() {\n    // Test ended\n    if (testState.ended || testState.timeTaken > testState.duration) {\n      Router.push(\"/tests/\".concat(testState.id, \"/report\"));\n    }\n\n    if (testState.loading) {\n      return __jsx(CircularProgress, null);\n    } // Test not yet started\n\n\n    if (!testState.ended && testState.timeTaken === 0) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 3,\n        justify: \"center\"\n      }, __jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        md: 6\n      }, __jsx(Typography, {\n        style: {\n          fontWeight: 'bold'\n        },\n        variant: \"h4\",\n        component: \"p\",\n        gutterBottom: true\n      }, \"Instructions\"), __jsx(Box, {\n        textAlign: \"left\",\n        fontSize: \"h6.fontSize\"\n      }, __jsx(\"ol\", null, __jsx(\"li\", null, \"You must attempt all of the questions in this test.\"), __jsx(\"li\", null, \"You have 30 minutes to complete 20 questions, and once a question is answered it cannot be changed.\"), __jsx(\"li\", null, \"This is a timed test, so make sure you have a 30-minute block of uninterrupted time.\"), __jsx(\"li\", null, \"Coding knowledge is not required; the questions are simply testing your natural aptitude as a developer.\"), __jsx(\"li\", null, \"After completing the test, look for an email with your test report and next steps.\"))), __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        onClick: function onClick() {\n          var fsatApi = FSAT_API();\n          setTestState(function (testState) {\n            return _objectSpread({}, testState, {\n              loading: true\n            });\n          });\n          fsatApi.startTest({\n            testId: testState.id\n          }).then(function (response) {\n            setTestState(function (testState) {\n              return _objectSpread({}, testState, {}, response.data, {\n                timeTaken: (_Date$now() - Date.parse(response.data.start)) / 1000,\n                loading: false\n              });\n            });\n            setInterval(function () {\n              setTestState(function (testState) {\n                return _objectSpread({}, testState, {\n                  timeTaken: (_Date$now() - Date.parse(response.data.start)) / 1000\n                });\n              });\n            }, 1000);\n            return null;\n          })[\"catch\"](function (error) {\n            Sentry.captureException(error);\n            var errorMessage = getErrorMessage(error);\n            setTestState(function (testState) {\n              return _objectSpread({}, testState, {\n                loading: false\n              });\n            });\n            enqueueSnackbar(errorMessage.message, {\n              variant: errorMessage.type,\n              anchorOrigin: {\n                vertical: 'bottom',\n                horizontal: 'left'\n              }\n            });\n          });\n        }\n      }, \"Start\")));\n    }\n\n    if (testState.question) {\n      var _testState$question = testState.question,\n          description = _testState$question.description,\n          image = _testState$question.image,\n          answerChoices = _testState$question.answerChoices;\n      return __jsx(Grid, {\n        container: true,\n        spacing: 3,\n        justify: \"center\"\n      }, __jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        md: 6\n      }, image.data && __jsx(ResponsiveImage, {\n        src: \"data:\".concat(image.contentType, \";base64,\").concat(image.data)\n      }), __jsx(Question, {\n        dangerouslySetInnerHTML: {\n          __html: description\n        }\n      }), __jsx(RadioGroup, {\n        \"aria-label\": \"answer\",\n        name: \"answer\",\n        value: testState.answer || '',\n        onChange: function onChange(e) {\n          e.persist();\n          setTestState(function (testState) {\n            return _objectSpread({}, testState, {\n              answer: e.target.value\n            });\n          });\n        }\n      }, __jsx(Grid, {\n        container: true,\n        spacing: 0,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\"\n      }, answerChoices.slice(0, 3).map(function (value, index) {\n        return __jsx(Grid, {\n          item: true,\n          xs: 6,\n          key: index\n        }, __jsx(FormControlLabel, {\n          style: {\n            \"float\": 'left'\n          },\n          value: value,\n          control: __jsx(Radio, {\n            color: \"primary\"\n          }),\n          label: __jsx(Typography, {\n            style: {\n              fontWeight: '600'\n            }\n          }, value)\n        }));\n      }), answerChoices.slice(3, 5).map(function (value, index) {\n        return __jsx(Grid, {\n          item: true,\n          xs: 6,\n          key: index\n        }, __jsx(FormControlLabel, {\n          style: {\n            \"float\": 'left'\n          },\n          value: value,\n          control: __jsx(Radio, {\n            color: \"primary\"\n          }),\n          label: __jsx(Typography, {\n            style: {\n              fontWeight: '600'\n            }\n          }, value)\n        }));\n      })))));\n    }\n  };\n\n  var questionNumber = get(testState.question, 'number') ? get(testState.question, 'number') : null;\n  return __jsx(React.Fragment, null, __jsx(NextSeo, {\n    noindex: true\n  }), __jsx(TopBar, null, __jsx(ResponsiveImage, {\n    width: \"auto\",\n    height: \"100%\",\n    alt: \"Forward School\",\n    src: require('../../../../public/forward-school-logo-white.png')\n  })), __jsx(QuestionStepperBar, null, __jsx(Hidden, {\n    mdUp: true\n  }, __jsx(MobileStepper, {\n    steps: testState.totalQuestions,\n    position: \"static\",\n    variant: \"dots\",\n    activeStep: questionNumber ? questionNumber - 1 : null,\n    style: {\n      background: 'transparent'\n    }\n  })), __jsx(Container, null, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: questionNumber ? questionNumber - 1 : null,\n    style: {\n      background: 'transparent'\n    }\n  }, _toConsumableArray(Array(testState.totalQuestions).keys()).map(function (value, index) {\n    return __jsx(Step, {\n      key: value + 1\n    }, __jsx(StepLabel, null));\n  }))))))), __jsx(Main, null, __jsx(Container, null, renderContent())), __jsx(BottomBar, null, __jsx(Container, null, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    variant: \"button\",\n    style: {\n      fontWeight: 'bold',\n      color: 'white'\n    }\n  }, questionNumber !== null ? \"QUESTION \".concat(questionNumber) : '')), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(TimerCountdown, {\n    variant: \"h4\"\n  }, testState.timeTaken >= testState.duration ? '00:00' : formatTime(testState.duration - testState.timeTaken))), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(NextButton, {\n    disabled: !testState.answer || testState.loading || testState.timeTaken > testState.duration,\n    size: \"large\",\n    endIcon: __jsx(KeyboardArrowRight, null),\n    onClick: function onClick() {\n      var fsatApi = FSAT_API();\n      setTestState(function (testState) {\n        return _objectSpread({}, testState, {\n          loading: true\n        });\n      });\n      fsatApi.answerQuestion({\n        testId: testState.id,\n        questionNumber: questionNumber,\n        answer: testState.answer\n      }).then(function (response) {\n        setTestState(function (testState) {\n          return _objectSpread({}, testState, {}, response.data, {\n            answer: null,\n            loading: false\n          });\n        });\n        return null;\n      })[\"catch\"](function (error) {\n        Sentry.captureException(error);\n        var errorMessage = getErrorMessage(error);\n        setTestState(function (testState) {\n          return _objectSpread({}, testState, {\n            loading: false\n          });\n        });\n        enqueueSnackbar(errorMessage.message, {\n          variant: errorMessage.type,\n          anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          }\n        });\n      });\n    }\n  }, questionNumber === testState.totalQuestions ? 'Finish' : 'Next'))))));\n};\n\nTest.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var req, res, query, fsatApi, testId, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref2.req, res = _ref2.res, query = _ref2.query;\n            fsatApi = FSAT_API();\n            testId = query.testId;\n\n            if (!req) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.prev = 4;\n            _context.next = 7;\n            return fsatApi.getTest({\n              testId: testId\n            });\n\n          case 7:\n            response = _context.sent;\n\n            if (response.data.ended) {\n              res.writeHead(302, {\n                Location: \"/tests/\".concat(testId, \"/report\")\n              });\n              res.end();\n            }\n\n            return _context.abrupt(\"return\", {\n              data: response.data,\n              error: null\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](4);\n            res.statusCode = 404;\n            return _context.abrupt(\"return\", {\n              data: null,\n              error: _context.t0.response.data\n            });\n\n          case 16:\n            return _context.abrupt(\"return\", {\n              data: null,\n              error: null\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 12]]);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Test;","map":{"version":3,"sources":["/home/forwardschool/aptitude-web/src/pages/tests/[testId]/index.js"],"names":["React","useState","useEffect","styled","Container","Grid","Box","Button","Typography","Stepper","MobileStepper","Step","StepLabel","Hidden","Radio","RadioGroup","FormControlLabel","CircularProgress","Router","ErrorPage","NextSeo","useSnackbar","get","KeyboardArrowRight","Sentry","theme","getErrorMessage","ResponsiveImage","FSAT_API","Centered","div","Main","breakpoints","down","Question","Bar","palette","primary","main","TopBar","QuestionStepperBar","grey","BottomBar","TimerCountdown","common","white","NextButton","Test","data","error","statusCode","enqueueSnackbar","answer","loading","testState","setTestState","ended","timeTaken","setInterval","Date","parse","start","formatTime","timeInSeconds","format","val","Math","floor","slice","minutes","map","join","renderContent","duration","push","id","fontWeight","fsatApi","startTest","testId","then","response","captureException","errorMessage","message","variant","type","anchorOrigin","vertical","horizontal","question","description","image","answerChoices","contentType","__html","e","persist","target","value","index","questionNumber","require","totalQuestions","background","Array","keys","color","answerQuestion","getInitialProps","req","res","query","getTest","writeHead","Location","end"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport {\n  Container,\n  Grid,\n  Box,\n  Button,\n  Typography,\n  Stepper,\n  MobileStepper,\n  Step,\n  StepLabel,\n  Hidden,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  CircularProgress\n} from '@material-ui/core'\nimport Router from 'next/router'\nimport ErrorPage from 'next/error'\nimport { NextSeo } from 'next-seo'\nimport { useSnackbar } from 'notistack'\nimport { get } from 'lodash'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport * as Sentry from '@sentry/browser'\n\nimport theme from '../../../config/theme'\nimport { getErrorMessage } from '../../../utils/error'\nimport ResponsiveImage from '../../../components/ResponsiveImage'\nimport FSAT_API from '../../../api'\n\nconst Centered = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  text-align: center;\n`\n\nconst Main = styled(Centered)`\n  min-height: calc(100vh - 220px);\n  margin: 140px 0 80px;\n  padding: 20px 10px;\n\n  background ${theme.breakpoints.down('md')} {\n    min-height: calc(100vh - 170px);\n    margin: 105px 0 65px;\n    padding: 15px 10px;\n  }\n\n  ${theme.breakpoints.down('sm')} {\n    min-height: calc(100vh - 120px);\n    margin: 75px 0 45px;\n    padding: 20px 10px;\n  }\n`\n\nconst Question = styled.div`\n  font-weight: 600;\n  font-size: 1rem;\n  text-align: left;\n\n  background ${theme.breakpoints.down('md')} {\n    font-size: 0.95rem;\n  }\n\n  ${theme.breakpoints.down('sm')} {\n    font-size: 0.9rem;\n  }\n`\n\nconst Bar = styled(Centered)`\n  position: fixed;\n  height: 80px;\n  padding: 15px;\n  background-color: ${theme.palette.primary.main};\n\n  ${theme.breakpoints.down('md')} {\n    height: 65px;\n    padding: 12px;\n  }\n\n  ${theme.breakpoints.down('sm')} {\n    height: 45px;\n    padding: 8px;\n  }\n`\n\nconst TopBar = styled(Bar)`\n  top: 0;\n  left: 0;\n`\n\nconst QuestionStepperBar = styled(Bar)`\n  top: 80px;\n  left: 0;\n  height: 60px;\n  padding: 15px 0 0 0;\n  background-color: ${theme.palette.grey[100]};\n\n  ${theme.breakpoints.down('md')} {\n    top: 65px;\n    height: 50px;\n    padding: 15px 0 0 0;\n  }\n\n  ${theme.breakpoints.down('sm')} {\n    top: 45px;\n    height: 30px;\n    padding: 10px;\n  }\n`\n\nconst BottomBar = styled(Bar)`\n  bottom: 0;\n  left: 0;\n`\n\nconst TimerCountdown = styled(Typography)`\n  color: ${theme.palette.common.white};\n  font-weight: bold;\n`\n\nconst NextButton = styled(Button)`\n  color: ${theme.palette.common.white};\n  font-weight: bold;\n\n  &:disabled {\n    color: ${theme.palette.grey[400]};\n  }\n`\n\nconst Test = ({ data, error }) => {\n  if (error) {\n    return <ErrorPage statusCode={error.statusCode} />\n  }\n\n  const { enqueueSnackbar } = useSnackbar()\n  const [testState, setTestState] = useState({\n    ...data,\n    answer: null,\n    loading: false\n  })\n\n  useEffect(() => {\n    if (!testState.ended && testState.timeTaken > 0) {\n      setInterval(() => {\n        setTestState(testState => ({\n          ...testState,\n          timeTaken: (Date.now() - Date.parse(testState.start)) / 1000\n        }))\n      }, 1000)\n    }\n  }, [null])\n\n  const formatTime = timeInSeconds => {\n    const format = val => `0${Math.floor(val)}`.slice(-2)\n    const minutes = (timeInSeconds % 3600) / 60\n\n    return [minutes, timeInSeconds % 60].map(format).join(':')\n  }\n\n  const renderContent = () => {\n    // Test ended\n    if (testState.ended || testState.timeTaken > testState.duration) {\n      Router.push(`/tests/${testState.id}/report`)\n    }\n\n    if (testState.loading) {\n      return <CircularProgress />\n    }\n\n    // Test not yet started\n    if (!testState.ended && testState.timeTaken === 0) {\n      return (\n        <Grid container spacing={3} justify='center'>\n          <Grid item xs={12} sm={8} md={6}>\n            <Typography\n              style={{ fontWeight: 'bold' }}\n              variant='h4'\n              component='p'\n              gutterBottom\n            >\n              Instructions\n            </Typography>\n            <Box textAlign='left' fontSize='h6.fontSize'>\n              <ol>\n                <li>You must attempt all of the questions in this test.</li>\n                <li>\n                  You have 30 minutes to complete 20 questions, and once a\n                  question is answered it cannot be changed.\n                </li>\n                <li>\n                  This is a timed test, so make sure you have a 30-minute block\n                  of uninterrupted time.\n                </li>\n                <li>\n                  Coding knowledge is not required; the questions are simply\n                  testing your natural aptitude as a developer.\n                </li>\n                <li>\n                  After completing the test, look for an email with your test\n                  report and next steps.\n                </li>\n              </ol>\n            </Box>\n            <Button\n              variant='contained'\n              color='primary'\n              size='large'\n              onClick={() => {\n                const fsatApi = FSAT_API()\n\n                setTestState(testState => ({\n                  ...testState,\n                  loading: true\n                }))\n\n                fsatApi\n                  .startTest({ testId: testState.id })\n                  .then(response => {\n                    setTestState(testState => ({\n                      ...testState,\n                      ...response.data,\n                      timeTaken:\n                        (Date.now() - Date.parse(response.data.start)) / 1000,\n                      loading: false\n                    }))\n\n                    setInterval(() => {\n                      setTestState(testState => ({\n                        ...testState,\n                        timeTaken:\n                          (Date.now() - Date.parse(response.data.start)) / 1000\n                      }))\n                    }, 1000)\n\n                    return null\n                  })\n                  .catch(error => {\n                    Sentry.captureException(error)\n\n                    const errorMessage = getErrorMessage(error)\n\n                    setTestState(testState => ({\n                      ...testState,\n                      loading: false\n                    }))\n\n                    enqueueSnackbar(errorMessage.message, {\n                      variant: errorMessage.type,\n                      anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left'\n                      }\n                    })\n                  })\n              }}\n            >\n              Start\n            </Button>\n          </Grid>\n        </Grid>\n      )\n    }\n\n    if (testState.question) {\n      const { description, image, answerChoices } = testState.question\n\n      return (\n        <Grid container spacing={3} justify='center'>\n          <Grid item xs={12} sm={8} md={6}>\n            {image.data && (\n              <ResponsiveImage\n                src={`data:${image.contentType};base64,${image.data}`}\n              />\n            )}\n            <Question dangerouslySetInnerHTML={{ __html: description }} />\n            <RadioGroup\n              aria-label='answer'\n              name='answer'\n              value={testState.answer || ''}\n              onChange={e => {\n                e.persist()\n                setTestState(testState => ({\n                  ...testState,\n                  answer: e.target.value\n                }))\n              }}\n            >\n              <Grid\n                container\n                spacing={0}\n                justify='flex-start'\n                alignItems='flex-start'\n              >\n                {answerChoices.slice(0, 3).map((value, index) => (\n                  <Grid item xs={6} key={index}>\n                    <FormControlLabel\n                      style={{ float: 'left' }}\n                      value={value}\n                      control={<Radio color='primary' />}\n                      label={\n                        <Typography style={{ fontWeight: '600' }}>\n                          {value}\n                        </Typography>\n                      }\n                    />\n                  </Grid>\n                ))}\n                {answerChoices.slice(3, 5).map((value, index) => (\n                  <Grid item xs={6} key={index}>\n                    <FormControlLabel\n                      style={{ float: 'left' }}\n                      value={value}\n                      control={<Radio color='primary' />}\n                      label={\n                        <Typography style={{ fontWeight: '600' }}>\n                          {value}\n                        </Typography>\n                      }\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </RadioGroup>\n          </Grid>\n        </Grid>\n      )\n    }\n  }\n\n  const questionNumber = get(testState.question, 'number')\n    ? get(testState.question, 'number')\n    : null\n\n  return (\n    <>\n      <NextSeo noindex />\n      <TopBar>\n        <ResponsiveImage\n          width='auto'\n          height='100%'\n          alt='Forward School'\n          src={require('../../../../public/forward-school-logo-white.png')}\n        />\n      </TopBar>\n      <QuestionStepperBar>\n        <Hidden mdUp>\n          <MobileStepper\n            steps={testState.totalQuestions}\n            position='static'\n            variant='dots'\n            activeStep={questionNumber ? questionNumber - 1 : null}\n            style={{ background: 'transparent' }}\n          />\n        </Hidden>\n        <Container>\n          <Grid container spacing={0}>\n            <Grid item xs={12}>\n              <Hidden smDown>\n                <Stepper\n                  alternativeLabel\n                  activeStep={questionNumber ? questionNumber - 1 : null}\n                  style={{ background: 'transparent' }}\n                >\n                  {[...Array(testState.totalQuestions).keys()].map(\n                    (value, index) => {\n                      return (\n                        <Step key={value + 1}>\n                          <StepLabel />\n                        </Step>\n                      )\n                    }\n                  )}\n                </Stepper>\n              </Hidden>\n            </Grid>\n          </Grid>\n        </Container>\n      </QuestionStepperBar>\n      <Main>\n        <Container>{renderContent()}</Container>\n      </Main>\n      <BottomBar>\n        <Container>\n          <Grid\n            container\n            justify='space-between'\n            alignItems='center'\n            spacing={3}\n          >\n            <Grid item xs={4}>\n              <Typography\n                variant='button'\n                style={{ fontWeight: 'bold', color: 'white' }}\n              >\n                {questionNumber !== null ? `QUESTION ${questionNumber}` : ''}\n              </Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <TimerCountdown variant='h4'>\n                {testState.timeTaken >= testState.duration\n                  ? '00:00'\n                  : formatTime(testState.duration - testState.timeTaken)}\n              </TimerCountdown>\n            </Grid>\n            <Grid item xs={4}>\n              <NextButton\n                disabled={\n                  !testState.answer ||\n                  testState.loading ||\n                  testState.timeTaken > testState.duration\n                }\n                size='large'\n                endIcon={<KeyboardArrowRight />}\n                onClick={() => {\n                  const fsatApi = FSAT_API()\n\n                  setTestState(testState => ({\n                    ...testState,\n                    loading: true\n                  }))\n\n                  fsatApi\n                    .answerQuestion({\n                      testId: testState.id,\n                      questionNumber,\n                      answer: testState.answer\n                    })\n                    .then(response => {\n                      setTestState(testState => ({\n                        ...testState,\n                        ...response.data,\n                        answer: null,\n                        loading: false\n                      }))\n\n                      return null\n                    })\n                    .catch(error => {\n                      Sentry.captureException(error)\n\n                      const errorMessage = getErrorMessage(error)\n\n                      setTestState(testState => ({\n                        ...testState,\n                        loading: false\n                      }))\n\n                      enqueueSnackbar(errorMessage.message, {\n                        variant: errorMessage.type,\n                        anchorOrigin: {\n                          vertical: 'bottom',\n                          horizontal: 'left'\n                        }\n                      })\n                    })\n                }}\n              >\n                {questionNumber === testState.totalQuestions\n                  ? 'Finish'\n                  : 'Next'}\n              </NextButton>\n            </Grid>\n          </Grid>\n        </Container>\n      </BottomBar>\n    </>\n  )\n}\n\nTest.getInitialProps = async ({ req, res, query }) => {\n  const fsatApi = FSAT_API()\n  const { testId } = query\n\n  if (req) {\n    try {\n      const response = await fsatApi.getTest({\n        testId\n      })\n\n      if (response.data.ended) {\n        res.writeHead(302, {\n          Location: `/tests/${testId}/report`\n        })\n        res.end()\n      }\n\n      return { data: response.data, error: null }\n    } catch (error) {\n      res.statusCode = 404\n\n      return { data: null, error: error.response.data }\n    }\n  }\n\n  return { data: null, error: null }\n}\n\nTest.propTypes = {\n  data: PropTypes.object,\n  error: PropTypes.object\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}